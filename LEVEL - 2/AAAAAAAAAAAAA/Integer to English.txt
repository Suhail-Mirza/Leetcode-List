unordered_map<int, string> umap = 
	{
		{ 0, "" },
		{ 1, "One " },
		{ 2, "Two " },
		{ 3, "Three " },
		{ 4, "Four " },
		{ 5, "Five " },
		{ 6, "Six " },
		{ 7, "Seven " },
		{ 8, "Eight " },
		{ 9, "Nine " },
		{ 10, "Ten " },
		{ 11, "Eleven " },
		{ 12, "Twelve " },
		{ 13, "Thirteen " },
		{ 14, "Fourteen " },
		{ 15, "Fifteen " },
		{ 16, "Sixteen " },
		{ 17, "Seventeen " },
		{ 18, "Eighteen " },
		{ 19, "Nineteen " },
        { 20, "Twenty " },
		{ 30, "Thirty " },
		{ 40, "Forty " },
		{ 50, "Fifty " },
		{ 60, "Sixty " },
		{ 70, "Seventy " },
		{ 80, "Eighty " },
		{ 90, "Ninety " }
	};
    vector<int> range={1000000000,1000000,1000,100};
    vector<string> rname={"Billion","Million","Thousand","Hundred"};
    
    string numtoword(int num){
        if(umap.find(num)!=umap.end())return umap[num];
        string st="";
        if(num<100){
            st+=numtoword(num/10*10);
            st+=" ";
            st+=numtoword(num%10);
        }
        else {
            for(int i=0;i<4;i++){
                if(num<range[i])continue;
                st+=numtoword(num/range[i]);
                st+=" ";
                st+=rname[i];
                st+=" ";
                st+=numtoword(num%range[i]);
            }
        }
        while(st.back()==' ')st.pop_back();
        return st;
    }
    
    string numberToWords(int num) {
        if(num==0)return "Zero";
        
        return numtoword(num); 
    }