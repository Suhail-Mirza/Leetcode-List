   
#include <bits/stdc++.h>
using namespace std;
int n;
int cap[10][10];  
int find(int distance[],bool visited[],int n){     // find maximum of distance 
 int minvertex=-1;
 	for(int i=0;i<n;i++){
 		if(!visited[i]&&(minvertex==-1||distance[i]<distance[minvertex])){
 			minvertex=i;
		 }
	 }return minvertex;
}

void dijkstra(int n){
	int distance[n];
	bool visited[n];
	for(int i=0;i<n;i++){
		distance[i]=INT_MAX;
		visited[i]=false;
	}
	distance[0]=0;
	for(int i=0;i<n;i++){
		int minvertex=find(distance,visited,n);
		visited[minvertex]=true;
		for(int j=0;j<n;j++){
			if(cap[minvertex][j]!=0 && !visited[j]){
				int dist = distance[minvertex]+cap[minvertex][j];
				if(dist<distance[j])
				distance[j]=dist;
		}
	}
}
int main() 
{    
	cout<<"Enter the no of vertices"<<endl;
	cin>>n;
	cout<<"Enter the no of edges"<<endl;
	int e;
	cin>>e;
	int f,t,w;
	for(int i=0;i<n;i++)
	for(int j=0;j<n;j++)
	cap[i][j]=0;
	cout<<"Enter the connections and weights"<<endl;
	for(int i=0;i<e;i++){
		cout<<"From"<<endl;
		cin>>f;
		cout<<"To"<<endl;
		cin>>t;
		cout<<"Weight"<<endl;
		cin>>w;
		cap[f][t]=w;
	}
	dijkstra(n);
	return 0; 
} 

