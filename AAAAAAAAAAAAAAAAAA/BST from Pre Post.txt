TreeNode* construct_tree(vector<char>& preorder,
                         unordered_map<char,int>& postorderMap,
                         int& preIndex, int postStart, int postEnd)
{
    if (postStart > postEnd)
        return NULL;
    TreeNode *node = new TreeNode(preorder[preIndex]);
    ++preIndex;
    if (postStart == postEnd)
        return node;
    int postIndex = postorderMap[preorder[preIndex]];
    node->left = construct_tree(preorder, postorderMap, preIndex, postStart, postIndex);
    node->right = construct_tree(preorder, postorderMap, preIndex, postIndex+1, postEnd-1);
    return node;
}

int main()
{
    vector<char> preorder = {'A','D','H','L','Z','P','C'};
    vector<char> postorder = {'H','L','D','P','C','Z','A'};

    unordered_map<char,int> postorderMap;
    for (int i=0; i < postorder.size(); i++)
        postorderMap[postorder[i]] = i;;
    
    int preIndex = 0;
    TreeNode* root = construct_tree(preorder, postorderMap, preIndex, 0, postorder.size()-1);
