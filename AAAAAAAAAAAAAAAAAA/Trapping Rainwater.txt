int trap(vector<int>& height) {
        int n=height.size();
        if(n==0||n==1||n==2)return 0;
        int left[n];
        int right[n];
        left[0]=0;
        for(int i=1;i<n;i++)
            left[i]=max({height[i-1],left[i-1]});
        right[n-1]=0;
        for(int i=n-2;i>=0;i--)
            right[i]=max({height[i+1],right[i+1]});
        int sum=0;
        for(int i=1;i<n-1;i++){
            int m=min(left[i],right[i]);
            if(m-height[i]>0)
                sum=sum+m-height[i];
            
            
        }
        
        return sum;
        
    }


int trap(vector<int>& height)
{
    int left = 0, right = height.size() - 1;
    int ans = 0;
    int left_max = 0, right_max = 0;
    while (left < right) {
        // a taller bar exists on left pointer's right side
        if (height[left] < height[right]) {
            height[left] >= left_max ? (left_max = height[left]) : ans += (left_max - height[left]);
            ++left;
        }
        // a taller bar exists on right pointer's left side
        else {
            height[right] >= right_max ? (right_max = height[right]) : ans += (right_max - height[right]);
            --right;
        }
    }
    return ans;
}