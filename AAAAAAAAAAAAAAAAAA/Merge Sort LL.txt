#include<iostream>
using namespace std;

struct Node
{
	int data;
	Node *next;

	Node(int data): data(data), next(NULL) {}
};


Node* merge(Node* l1, Node* l2)
{
	Node dummy(1);
	Node* p = &dummy;

	while (l1 && l2)
	{
		if (l1->data < l2->data)
		{
			p->next = l1;
			l1 = l1->next;
		}
		else {
			p->next = l2;
			l2 = l2->next;
		}

		p = p->next;
	}

	if (l1)
		p->next = l1;
	if (l2)
		p->next = l2;

	return dummy.next;
}

Node* mergeSort(Node* head)
{

	/* terminating condition */

	if (head == NULL || head->next == NULL)
		return head;


	Node* slowPtr = head, *fastPtr = head, *prev = NULL;


	while (fastPtr != NULL && fastPtr->next != NULL)
	{
		prev = slowPtr;
		slowPtr = slowPtr->next;
		fastPtr  = fastPtr->next->next;
	}

	/* split the list int two half */
	prev->next = NULL;

	Node* l1 = mergeSort(head);
	Node* l2 = mergeSort(slowPtr);

	return merge(l1, l2);


}

void printList(Node* head)
{
	while (head)
	{
		cout << head->data << " ";
		head = head->next;
	}
	cout << endl;
}

int main()
{
	Node *head = NULL;

	head = new Node(5);
	head->next = new Node(4);
	head->next->next = new Node( 3);
	head->next->next->next = new Node( 2);
	head->next->next->next->next = new Node( 1);

	printList(head);

	head = mergeSort(head);

	printList(head);

	return 0;
}