  //Cycle detection using BFS 
#include <bits/stdc++.h>
using namespace std;
int cap[10][10]; 
void BFSUtil(int i,int visited[],int n){
	queue<int> q;
	q.push(i);
	visited[i]=0;
	while(!q.empty()){
		int c = q.front();
		q.pop();
		visited[c]=1;
		for(int i=0;i<n;i++){
			if(cap[c][i]!=0 && visited[i]!=1){
				if(visited[i]==0){
					cout<<"Cycle Detected"<<endl;
					exit(0);
				}
				else{
					q.push(i);
					visited[i]=0;
				}
			}
		}
	}
}



void BFS(int n){
	int visited[n];
	for(int i=0;i<n;i++){
		visited[i] =-1;
	}
	for(int i=0;i<n;i++){
		if(visited[i]==-1)
		BFSUtil(i,visited,n);
	}
	
}
int main() 
{    int n;
	cout<<"Enter the no of vertices"<<endl;
	cin>>n;
	cout<<"Enter the no of edges"<<endl;
	int e;
	cin>>e;
	int f,t;
	for(int i=0;i<n;i++)
	for(int j=0;j<n;j++)
	cap[i][j]=0;
	cout<<"Enter the connections and weights"<<endl;
	for(int i=0;i<e;i++){
		cout<<"From"<<endl;
		cin>>f;
		cout<<"To"<<endl;
		cin>>t;
		//cout<<"Weight"<<endl;
		//cin>>w;
		cap[f][t]=1;
		cap[t][f]=1;
	}
	BFS(n);
	cout<<"Cycle not detected"<<endl;
	return 0; 
} 

