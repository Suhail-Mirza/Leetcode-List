#include<bits/stdc++.h>
using namespace std;
int n;
vector<pair<int,int>> X;
void GraphEdge(vector<pair<int,int>> adj[],int in, int t, int w){
	adj[in].push_back(make_pair(t,w));
}

void BFS(int s,vector<pair<int,int>> adj[]) 
{ 	int *v = new int[n]; 
    int x;
	for(int i=0; i<n ;i++) 
		v[i]=0;  
	queue<int> Q;  
	v[s]=1;
	Q.push(s);   
    while(!Q.empty()) 
	{ 
		s = Q.front(); 
		cout << s<< " "; 
		Q.pop(); 
		for (auto i = adj[s].begin(); i != adj[s].end(); ++i) 
		{    int x = i->first;   // important
			if (!v[x]) 
			{   
				v[x] = 1; 
				Q.push(x); 
			} 
		} 
	} 
} 

int main(){
	vector<pair<int,int>> adj[n];
	cout<<"Enter the no of vertices"<<endl;
	cin>>n;
    cout<<"Enter the no of edges"<<endl;
	int e;
	cin>>e;
	int in,t,w;
	for(int i=0;i<e;i++){
		cout<<"From"<<endl;	
		cin>>in;
		cout<<"To"<<endl;
		cin>>t;
		GraphEdge(adj,in,t,w);
		} 
	BFS(0,adj);	
}