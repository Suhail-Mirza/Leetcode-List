TreeNode* construct_tree(vector<char>& inorder, 
                         unordered_map<char,int>& levelorderMap,
                         int inStart, int inEnd)
{
    if (inStart > inEnd)
        return NULL;

    // find node with minimum index in level-order traversal
    // That would be the root node of inorder[start, end]
    int inIndex = inStart;
    for (int j = inStart + 1; j <= inEnd; j++)
    {
        if (levelorderMap[inorder[j]] < levelorderMap[inorder[inIndex]])
            inIndex = j;
    }
    
    TreeNode* node = new TreeNode(inorder[inIndex]);
    if (inStart == inEnd)
        return node;

    // recursively construct the left and right subtree
    node->left = construct_tree(inorder, levelorderMap, inStart, inIndex - 1);
    node->right = construct_tree(inorder,  levelorderMap, inIndex + 1, inEnd);

    return node;
}

int main()
{
    vector<char> inorder = {'H','D','P','L','A','Z','C','E'};
    vector<char> levelorder = {'A','D','Z','H','L','C','P','E'};

    // construct a value-to-index map for levelorder traversal
    unordered_map<char,int> levelorderMap;
    for (int i=0; i < levelorder.size(); i++)
        levelorderMap[levelorder[i]] = i;

    TreeNode* root = construct_tree(inorder, levelorderMap, 0, inorder.size()-1);